// /lib/export/dialog.ts
import type { DialogDesign } from "@/lib/design/dialog";
import { mapShadowToBoxShadow } from "@/lib/design/shadow";

type ExportOptions = { nextClient?: boolean };

const kebab = (s: string) =>
  s
    .replace(/([a-z0-9])([A-Z])/g, "$1-$2")
    .replace(/\s+/g, "-")
    .toLowerCase();

function radiusCSS(design: DialogDesign) {
  if (design.layout.radiusMode === "uniform")
    return `${design.layout.radius}px`;
  const { radiusTL, radiusTR, radiusBR, radiusBL } = design.layout;
  return `${radiusTL}px ${radiusTR}px ${radiusBR}px ${radiusBL}px`;
}

function dialogBlockCSS(design: DialogDesign) {
  const common = `max-width:${design.layout.maxWidth.base}px;width:100%;
color:${design.colors.fg};
border-radius:${radiusCSS(design)};
padding:${design.layout.padding.base}px;
display:flex;flex-direction:column;gap:${design.layout.gap}px;
box-shadow:${mapShadowToBoxShadow(design.shadow)};`;

  if (design.colors.borderMode === "gradient") {
    return `${common}
background:
  linear-gradient(${design.colors.bg}, ${design.colors.bg}) padding-box,
  linear-gradient(${design.layout.borderGradientAngle}deg, ${design.colors.borderGradStart}, ${design.colors.borderGradEnd}) border-box;
border:${design.layout.borderWidth}px solid transparent;`;
  }

  return `${common}
background:${design.colors.bg};
border:${design.layout.borderWidth}px solid ${design.colors.border};`;
}

// ——— SINGLE-FILE (unchanged behavior, but now can add 'use client') ———
export function buildSingleFileDialog(
  design: DialogDesign,
  opts: ExportOptions = {}
) {
  const name = design.name || "NiceDialog";
  const k = kebab(name);
  const useClient = opts.nextClient ? `"use client";\n\n` : "";

  const css = `/* ${name}.tsx — inline styles generated by UISmith */
.${k}__overlay{position:fixed;inset:0;display:grid;place-items:center;background:color-mix(in srgb,black 50%,transparent);padding:24px}
.${k}__dialog{${dialogBlockCSS(design)}}
.${k}__titleRow{display:flex;align-items:center;justify-content:space-between;background:${
    design.colors.titleBg
  }}
.${k}__titleText{color:${design.colors.titleFg};font-size:${
    design.type.titleSize
  }px;font-weight:${design.type.titleWeight}}
.${k}__body{color:${design.colors.bodyFg};line-height:1.6}
.${k}__footer{background:${
    design.colors.footerBg
  };display:flex;gap:12px;justify-content:flex-end}
.${k}__close{background:transparent;border:none;color:${
    design.colors.fg
  };font-size:20px;cursor:pointer;border-radius:6px;padding:2px 6px}
.${k}__btn{border-radius:999px;padding:10px 16px;font-weight:600;cursor:pointer;border:1px solid transparent}
.${k}__btnPrimary{background:${design.colors.accent};color:#0b0f17}
.${k}__btnGhost{background:transparent;color:${design.colors.fg};border-color:${
    design.colors.fg
  }33}
`;

  const tsx = `${useClient}import React, { useEffect, useId, useRef } from "react";

export interface ${name}Props {
  open?: boolean;
  title?: React.ReactNode;
  footer?: React.ReactNode;
  onClose?: () => void;
  children?: React.ReactNode;
}

export default function ${name}({ open = true, title, footer, onClose, children }: ${name}Props) {
  const labelledBy = useId();
  const lastFocusRef = useRef<HTMLElement | null>(null);

  useEffect(() => {
    if (!open) return;
    lastFocusRef.current = (document.activeElement as HTMLElement) ?? null;
    const onKey = (e: KeyboardEvent) => { if (e.key === "Escape") onClose?.(); };
    document.addEventListener("keydown", onKey);
    return () => { document.removeEventListener("keydown", onKey); lastFocusRef.current?.focus?.(); };
  }, [open, onClose]);

  if (!open) return null;

  const stop = (e: React.MouseEvent) => e.stopPropagation();

  return (
    <div className="${k}__overlay" onClick={() => onClose?.()}>
      <style>{\`${css}\`}</style>
      <div
        className="${k}__dialog"
        role="dialog"
        aria-modal="true"
        aria-labelledby={title ? labelledBy : undefined}
        onClick={stop}
      >
        ${
          design.structure.showTitle
            ? `
        <div className="${k}__titleRow">
          <div className="${k}__titleText" id={labelledBy}>{title}</div>
          ${
            design.structure.showClose
              ? `<button className="${k}__close" aria-label="Close" onClick={() => onClose?.()}>×</button>`
              : ``
          }
        </div>`
            : ``
        }

        ${
          design.structure.showBody
            ? `<div className="${k}__body">{children}</div>`
            : ``
        }

        ${
          design.structure.showFooter
            ? `<div className="${k}__footer">
          {footer ?? (
            <>
              <button className="${k}__btn ${k}__btnGhost" onClick={() => onClose?.()}>Cancel</button>
              <button className="${k}__btn ${k}__btnPrimary">Continue</button>
            </>
          )}
        </div>`
            : ``
        }
      </div>
    </div>
  );
}
`;

  return { filename: `${name}.tsx`, code: tsx };
}

// ——— TWO-FILE (CSS MODULES) ———
export function buildTwoFileDialog(
  design: DialogDesign,
  opts: ExportOptions = {}
) {
  const name = design.name || "NiceDialog";
  const k = kebab(name);
  const useClient = opts.nextClient ? `"use client";\n\n` : "";

  const css = `/* ${k}.module.css — generated by UISmith */
.overlay{position:fixed;inset:0;display:grid;place-items:center;background:color-mix(in srgb,black 50%,transparent);padding:24px}
.dialog{${dialogBlockCSS(design)}}
.titleRow{display:flex;align-items:center;justify-content:space-between;background:${
    design.colors.titleBg
  }}
.titleText{color:${design.colors.titleFg};font-size:${
    design.type.titleSize
  }px;font-weight:${design.type.titleWeight}}
.body{color:${design.colors.bodyFg};line-height:1.6}
.footer{background:${
    design.colors.footerBg
  };display:flex;gap:12px;justify-content:flex-end}
.close{background:transparent;border:none;color:${
    design.colors.fg
  };font-size:20px;cursor:pointer;border-radius:6px;padding:2px 6px}
.btn{border-radius:999px;padding:10px 16px;font-weight:600;cursor:pointer;border:1px solid transparent}
.btnPrimary{background:${design.colors.accent};color:#0b0f17}
.btnGhost{background:transparent;color:${design.colors.fg};border-color:${
    design.colors.fg
  }33}
`;

  const tsx = `${useClient}import React, { useEffect, useId, useRef } from "react";
import styles from "./${k}.module.css";

export interface ${name}Props {
  open?: boolean;
  title?: React.ReactNode;
  footer?: React.ReactNode;
  onClose?: () => void;
  children?: React.ReactNode;
}

export default function ${name}({ open = true, title, footer, onClose, children }: ${name}Props) {
  const labelledBy = useId();
  const lastFocusRef = useRef<HTMLElement | null>(null);

  useEffect(() => {
    if (!open) return;
    lastFocusRef.current = (document.activeElement as HTMLElement) ?? null;
    const onKey = (e: KeyboardEvent) => { if (e.key === "Escape") onClose?.(); };
    document.addEventListener("keydown", onKey);
    return () => { document.removeEventListener("keydown", onKey); lastFocusRef.current?.focus?.(); };
  }, [open, onClose]);

  if (!open) return null;
  const stop = (e: React.MouseEvent) => e.stopPropagation();

  return (
    <div className={styles.overlay} onClick={() => onClose?.()}>
      <div
        className={styles.dialog}
        role="dialog"
        aria-modal="true"
        aria-labelledby={title ? labelledBy : undefined}
        onClick={stop}
      >
        ${
          design.structure.showTitle
            ? `
        <div className={styles.titleRow}>
          <div className={styles.titleText} id={labelledBy}>{title}</div>
          ${
            design.structure.showClose
              ? `<button className={styles.close} aria-label="Close" onClick={() => onClose?.()}>×</button>`
              : ``
          }
        </div>`
            : ``
        }

        ${
          design.structure.showBody
            ? `<div className={styles.body}>{children}</div>`
            : ``
        }

        ${
          design.structure.showFooter
            ? `<div className={styles.footer}>
          {footer ?? (
            <>
              <button className={styles.btn + " " + styles.btnGhost} onClick={() => onClose?.()}>Cancel</button>
              <button className={styles.btn + " " + styles.btnPrimary}>Continue</button>
            </>
          )}
        </div>`
            : ``
        }
      </div>
    </div>
  );
}
`;

  return [
    { filename: `${name}.tsx`, code: tsx },
    { filename: `${k}.module.css`, code: css },
  ];
}

export function buildTestDialogUsage(
  design: DialogDesign,
  opts: ExportOptions = {}
) {
  const name = design.name || "NiceDialog";
  const useClient = opts.nextClient ? `"use client";\n\n` : "";
  const test = `${useClient}import React, { useState } from "react";
import ${name} from "./${name}";

export default function ${name}Test() {
  const [open, setOpen] = useState(true);
  return (
    <div style={{ minHeight: "60vh", display: "grid", placeItems: "center" }}>
      <button onClick={() => setOpen(true)}>Open ${name}</button>
      <${name} open={open} title="${name} title" onClose={() => setOpen(false)}>
        Hello from ${name}! Customize me with UISmith.
      </${name}>
    </div>
  );
}
`;
  return { filename: `${name}.test.tsx`, code: test };
}
